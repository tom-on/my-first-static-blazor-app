@page "/user"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebAssemblyHostEnvironment HostEnvironment

<LoginProviders/> 

<h3>ClaimsPrincipal Data</h3>

<button @onclick="GetClaimsPrincipalData">Get ClaimsPrincipal Data</button>

<p> Auth message:</p>
<p>@_authMessage</p>
<p>Hosting Environment: @HostEnvironment.Environment</p>

@if (_claims.Count() > 0)
{
    <ul>
        @foreach (var claim in _claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}

<p>@_surnameMessage</p>

@code {
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            foreach (var identity in authState.User.Identities)
            {
                var authType = identity.AuthenticationType;
                var authName = identity.Name;
                _authMessage += $"{user.Identity.Name} is authenticated. Auth type: {authType}";
            }
            _claims = user.Claims;
            _surnameMessage =
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
}